FORMAT: 1A

# LinkedList

This is the RESTful API backend to the [LinkedList project](https://github.com/rithmschool/LinkedList) (a spin-off of LinkedIn / AngelList)

&nbsp;

---

&nbsp;

## Resource Structure

### Collections

The API provides access to the following collections.
Both collections have full CRUD operations.

#### Users

- Collection Endpoint: `/users`
- Singular Endpoint: `/users/{username}`
- Attributes:
  - firstName
  - lastName
  - username
  - password
  - photo
  - experience (array)
    - jobTitle
    - company
    - startDate
    - endDate
  - education (array)
    - institution
    - degree
    - endDate
  - skills (array)
  - createdAt
  - updatedAt

#### Companies

- Collection Endpoint: `/companies`
- Singular Endpoint: `/companies/{companyUsername}`
- Attributes:
  - adminFirstName
  - adminLastName
  - companyUsername
  - password
  - username (posted by)
  - logo
  - employees (array of **User**)
  - jobs (array of **Job**)

#### Jobs

- Collection Endpoint: `/jobs`
- Singular Endpoint: `/jobs/{jobId}`
- Attributes:
  - title
  - company (**Company**)
  - salary
  - equity
  - createdAt
  - updatedAt

See the [Reference section](/#reference/0/auth) for fully-detailed resource documentation.

&nbsp;

---

## Auth [/auth]
Endpoint for authenticating by getting a JWT from the server.

### Authorize to Receive a Token [POST]

+ Request
    + Attributes
        + data (Auth)
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data
            + token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1odWV0ZXIiLCJpYXQiOjE1MTAyMDcwMDl9.5oUeihYn2AkqGy6z3g5F5B46gWWgvGKilFr9S4gg-p4` (string, required) - JWT used to authenticate in the future. Put in `Authorization` request header like: `Bearer <TOKEN>`.

+ Request Bad Request
    + Attributes
        + data (Auth)
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Unauthorized
    + Attributes
        + data (Auth)
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
    + Attributes
        + data (Auth)
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)


## Users [/users{?skip,limit,q}]
Endpoint to create a user or query for a list of users.

### Get a List of Users [GET]
**Auth Required**. Note: passwords are not visible at this endpoint. By default, `limit` is set to 50.

+ Parameters
    + skip: 0 (number, optional) - the list of documents to skip over. Default is 0.
    + limit: 10 (number, optional) - the number of documents to return. Default and maximum set to 50.
    + q: `Matt Lane` (string, optional) - the field to search by.

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (array[User])

+ Request Bad Request
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Unauthorized
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

### Create a New User [POST]
Note: password will not be present in the response.
The fields `username`, `password`, and `name` are required.

+ Request
    + Attributes
        + data (User)
+ Response 201 (application/json; charset=utf-8)
    + Attributes
        + data (User)

+ Request Bad Request
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Conflict
+ Response 409 (application/json; charset=utf-8)
    + Attributes
        + error (Conflict)


## User [/users/{username}]
Endpoint for reading, updating, or deleting a single user.

+ Parameters
    + username: mhueter (string, required) - the username to lookup.

### Get a User [GET]
**Auth Required**. Retrieve a single user document by `username`.

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (User)

+ Request Unauthorized
    + Attributes
        + data (User)
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)


### Update a User [PATCH]
**Auth Required. Correct User Required.** Update a single user document by `username`. Note: `username` and `favorites` are immutable via this endpoint.

+ Request
    + Attributes
        + data (User)
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (User)

+ Request Bad Request
    + Attributes
        + data (User)
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Unauthorized
    + Attributes
        + data (User)
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
    + Attributes
        + data (User)
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

### Delete a User [DELETE]
**Auth Required. Correct User Required.** Remove a single user document by `username`.

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (Success)

+ Request Unauthorized
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

## Jobs [/jobs{?skip,limit,q}]
Endpoint to create a user or query for a list of users.

### Get a List of Jobs [GET]
**Auth Required**. Note: passwords are not visible at this endpoint. By default, `limit` is set to 50.

+ Parameters
    + skip: 0 (number, optional) - the list of documents to skip over. Default is 0.
    + limit: 10 (number, optional) - the number of documents to return. Default and maximum set to 50.
    + q: `Github` (string, optional) - the field to search by

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (array[User])

+ Request Bad Request
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Unauthorized
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

### Create a New Job [POST]
Note: password will not be present in the response.
The fields `title`, `company`, `salary`, and `equity` are required.

+ Request
    + Attributes
        + data (Job)
+ Response 201 (application/json; charset=utf-8)
    + Attributes
        + data (Job)

+ Request Bad Request
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Conflict
+ Response 409 (application/json; charset=utf-8)
    + Attributes
        + error (Conflict)

## Job [/company/{id}]
Endpoint for reading, updating, or deleting a single user.

+ Parameters
    + id: 4 (string, required) - the job to lookup.

### Get a Job [GET]
**Auth Required**. Retrieve a single company document by `company`.

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (Job)

+ Request Unauthorized
    + Attributes
        + data (Job)
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)


### Update a Job [PATCH]
**Auth Required. Correct User Required.** Update a single user document by `username`. Note: `username` and `favorites` are immutable via this endpoint.

+ Request
    + Attributes
        + data (Job)
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (Job)

+ Request Bad Request
    + Attributes
        + data (Job)
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Unauthorized
    + Attributes
        + data (Job)
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
    + Attributes
        + data (Job)
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

### Delete a Job [DELETE]
**Auth Required. Correct Job Required.** Remove a single job document by `id`.

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (Success)

+ Request Unauthorized
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

## Companies [/companies{?skip,limit,q}]
Endpoint to create a user or query for a list of users.

### Get a List of Companies [GET]
**Auth Required**. Note: passwords are not visible at this endpoint. By default, `limit` is set to 50.

+ Parameters
    + skip: 0 (number, optional) - the list of documents to skip over. Default is 0.
    + limit: 10 (number, optional) - the number of documents to return. Default and maximum set to 50.
    + q: `Github` (string, optional) - the field to search by

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (array[User])

+ Request Bad Request
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Unauthorized
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

### Create a New Company [POST]
Note: password will not be present in the response.
The fields `title`, `company`, `salary`, and `equity` are required.

+ Request
    + Attributes
        + data (Job)
+ Response 201 (application/json; charset=utf-8)
    + Attributes
        + data (Job)

+ Request Bad Request
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Conflict
+ Response 409 (application/json; charset=utf-8)
    + Attributes
        + error (Conflict)

## Company [/companies/{companyUsername}]
Endpoint for reading, updating, or deleting a single company.

+ Parameters
    + companyUsername: hooli (string, required) - the company to lookup.

### Get a Company [GET]
**Auth Required**. Retrieve a single company document by `company`.

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (Company)

+ Request Unauthorized
    + Attributes
        + data (Company)
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)


### Update a Company [PATCH]
**Auth Required. Correct User Required.** Update a single user document by `username`. Note: `username` and `favorites` are immutable via this endpoint.

+ Request
    + Attributes
        + data (Company)
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (Company)

+ Request Bad Request
    + Attributes
        + data (Company)
+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Request Unauthorized
    + Attributes
        + data (Company)
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
    + Attributes
        + data (Company)
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

### Delete a Company [DELETE]
**Auth Required. Correct Company Required.** Remove a single user document by `username`.

+ Request
+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + data (Success)

+ Request Unauthorized
+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Request Not Found
+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)


## Data Structures

### Auth
  + username: `mhueter` (string, optional) - username can only consist of letters and numbers between 1 and 55 characters. **Required to Create a New User. Immutable.**
  + password: `foo123` (string, optional) - between 1 and 55 characters. **Required to Create a New User.**

### User
  + firstName: `Michael` (string, optional) - the user's first name, between 1 and 55 characters. **Required to Create a New User.**
  + lastName: `Hueter` (string, optional) - the user's last name, between 1 and 55 characters. **Required to Create a New User.**
  + password: `foo123` (string, optional) - between 1 and 55 characters. **Required to Create a New User.**
  + username: `mhueter` (string, optional) - username can only consist of letters and numbers between 1 and 55 characters. **Required to Create a New User. Immutable.**
  + photo: `https://www.mhueter.com` (string, optional) - A valid URL for a photo
  + experience: (array, optional)
    + (object)
      + jobTitle: `Commander In Chief`
      + company (Company)
      + startDate: `2016-06-15T21:39:25.435000+00:00` (string, optional) - ISO date-format timestamp when experience began.
      + endDate: `2017-06-15T21:39:25.435000+00:00` (string, optional) - ISO date-format timestamp when experience ended.
  + education: (array, optional)
    + (object)
      + institution: `School of Hard Knocks`
      + degree: `Bachelors in Science`
      + endDate: `2014-06-15T21:39:25.435000+00:00` (string, optional) - ISO date-format timestamp when education ended.
  + skills: (array[string])
  + createdAt: `017-11-09T18:38:39.409Z` (string, optional) - auto-generated timestamp of when the user was originally created.
  + updatedAt: `017-11-09T18:38:39.409Z`  (string, optional) - auto-generated timestamp of when the user was last updated.


### Company
  + adminFirstName: `Michael` (string, optional) - the user's first name who is creating the company, between 1 and 55 characters. **Required to Create a New Company.**
  + adminLastName: `Hueter` (string, optional) - the user's last name who is creating the company, between 1 and 55 characters. **Required to Create a New Company.**
  + password: `foo123` (string, optional) - between 1 and 55 characters. **Required to Create a New Company.**
  + companyUsername: `mhueter` (string, optional) - username can only consist of letters and numbers between 1 and 55 characters. **Required to Create a New Company. Immutable.**
  + logo: `https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png` (string, optional) - a valid URL for the logo of the company
  + employees (array[User])
  + jobs (array[Job])

#### Job
  + title: (string, optional) - the title for the job posting.
  + company (Company)
  + salary: (number, optional) - a number for the salary offered in this post
  + equity: (number, optional) - a float for the equity offered in this post
  + createdAt: `017-11-09T18:38:39.409Z` (string, optional) - auto-generated timestamp of when the user was originally created.
  + updatedAt: `017-11-09T18:38:39.409Z`  (string, optional) - auto-generated timestamp of when the user was last updated.

### Bad Request
  + status: 400 (number, required) - HTTP status code
  + title: 'Bad Request' (string, required) - text accompanying the status code
  + message: 'Invalid schema format or malformed JSON.' (string, required) - description of the error

### Unauthorized
  + status: 401 (number, required) - HTTP status code
  + title: 'Unauthorized' (string, required) - text accompanying the status code
  + message: 'You need to authenticate before accessing this resource.' (string, required) - description of the error

### Not Found
  + status: 404 (number, required) - HTTP status code
  + title: 'Not Found' (string, required) - text accompanying the status code
  + message: 'Document with that ID was not found.' (string, required) - description of the error

### Conflict
  + status: 409 (number, required) - HTTP status code
  + title: 'Conflict' (string, required) - text accompanying the status code
  + message: 'Another document with the same ID already exists.' (string, required) - description of the error

### Success
  + status: 200 (number, required) - HTTP status code
  + title: 'Success' (string, required) - text accompanying the status code
  + message: 'The operation was successful.' (string, required) - description of the event
