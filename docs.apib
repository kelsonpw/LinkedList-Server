FORMAT: 1A
HOST: https://linkedlist-rithm.herokuapp.com

# LinkedList

This is the RESTful API backend to the [LinkedList project](https://github.com/rithmschool/LinkedList) (a spin-off of LinkedIn / AngelList)

&nbsp;

---

&nbsp;

## Resource Structure

&nbsp;

### Collections

The API provides access to the following collections.
Both collections have full CRUD operations.

#### Users

- **Collection Endpoint**: `/users`
- **Singular Endpoint**: `/users/{username}`
- **Attributes**:
  - `first_name` - the user's first name, between 1 and 55 characters. Required to Create a New User.
  - `last_name` - the user's last name, between 1 and 55 characters. Required to Create a New User.
  - `username` - username can only consist of letters and numbers between 1 and 55 characters. Required to Create a New User. MUST BE UNIQUE.
  - `email` - between 6 and 60 characters. Required to Create a New User. MUST BE UNIQUE.
  - `password` - between 5 and 55 characters. Required to Create a New User.
  - `photo` - A valid URL for a photo.
  - `current_company` - this should reference a company handle IF IT EXISTS 
  - `applied_to` - array of Job IDs that user applied to

#### Companies

- **Collection Endpoint**: `/companies`
- **Singular Endpoint**: `/companies/{handle}`
- **Attributes**:
  - `name` - username can only consist of letters and numbers between 1 and 55 characters. Required to Create a New Company.
  - `email` - between 6 and 60 characters. Required to Create a New Company. MUST BE UNIQUE.
  - `handle` - between 1 and 55 characters. Required to Create a New Company. MUST BE UNIQUE.
  - `password` - between 1 and 55 characters. Required to Create a New Company.
  - `logo` - a valid URL for the logo of the company.
  - `employees` - array of usernames who work at the company.
  - `jobs` - array of Job IDs company has listed

#### Jobs

- **Collection Endpoint**: `/jobs`
- **Singular Endpoint**: `/jobs/{id}`
- **Attributes**:
  - `title` - the title for the job posting. Required to post a job.
  - `company` - this should reference a handle for a company. Companies cannot post on behalf of other companies. Required to post a job.
  - `salary` - a text for the salary offered in this post. Required to post a job. Examples: `"100,000-150,000"`, `"TBD"`, `"Based on Experience"`.
  - `equity` - a float for the equity offered in this post.

See the [Reference section](/#reference/0/auth) for fully-detailed resource documentation.

&nbsp;

## Quickstart

&nbsp;

### I. Creating a New User

&nbsp;

**We're going to post this JSON data to `localhost:3000`:**

```json
{
    "first_name": "Michael",
    "last_name": "Hueter",
    "username": "hueter",
    "email": "michael@rithmschool.com",
    "password": "foo123",
    "current_company": null,
    "photo": "https://avatars0.githubusercontent.com/u/13444851?s=460&v=4"
}
```

&nbsp;

**Here's what a cURL request for that looks like:**

```sh
curl -X POST \
  https://linkedlist-rithm.herokuapp.com/users \
  -H 'Cache-Control: no-cache' \
  -H 'Content-Type: application/json' \
  -d '{
        "current_company": "rithm",
        "email": "michael@rithmschool.com",
        "first_name": "Michael",
        "last_name": "Hueter",
        "password": "foo123",
        "photo": "https://avatars0.githubusercontent.com/u/13444851?s=460&v=4",
        "username": "hueter"
    }
'
```

&nbsp;

### II. Authenticating

&nbsp;

**We'll be posting the `username` and `password` to `/user-auth`**

```json
{
    "username": "hueter",
    "password": "foo123"
}
```

&nbsp;

**Here's the curl request (again assuming you're running the server on `localhost`).**

```sh
curl -X POST \
  https://linkedlist-rithm.herokuapp.com/user-auth \
  -H 'Cache-Control: no-cache' \
  -H 'Content-Type: application/json' \
  -d '{
    "username": "hueter",
    "password": "foo123"
}
'
```

&nbsp;

**You should get back a token, like this (this is a fake token, obviously):**

&nbsp;

```json
{
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.zzZ1a2VybmFtZSI6Imh1ZXRlciIsImlhdCI6MTUyNDY5Mzc5OX0.fn0LbvCTbw21W4-fKeDpAz2Fod0iWPl7oBKcnyjGUwI"
}
```

&nbsp;

### III. Auth Headers

&nbsp;

**For all future requests, put the token in the `Authorization` header, with the `Bearer` format, like so:**

`Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.zzZ1a2VybmFtZSI6Imh1ZXRlciIsImlhdCI6MTUyNDY5Mzc5OX0.fn0LbvCTbw21W4-fKeDpAz2Fod0iWPl7oBKcnyjGUwI`.

&nbsp;

**Here's what an update password request looks like:**

```sh
curl -X PATCH \
  https://linkedlist-rithm.herokuapp.com/users/hueter \
  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.zzZ1a2VybmFtZSI6Imh1ZXRlciIsImlhdCI6MTUyNDY5Mzc5OX0.fn0LbvCTbw21W4-fKeDpAz2Fod0iWPl7oBKcnyjGUwI' \
  -H 'Cache-Control: no-cache' \
  -H 'Content-Type: application/json' \
  -d '{
        "password": "foo23"
      }'
```

---

## User Auth [/user-auth]
**Endpoint:** `/user-auth` 

**Purpose:** Authenticate a user by getting a JWT from the server.

### User Auth to Receive Token (POST) [POST]

+ Request
    + Attributes (UserAuth)

+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1odWV0ZXIiLCJpYXQiOjE1MTAyMDcwMDl9.5oUeihYn2AkqGy6z3g5F5B46gWWgvGKilFr9S4gg-p4` (string, required) - JWT used to authenticate in the future. Put in `Authorization` request header like: `Bearer <TOKEN>`.

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

## Company Auth [/company-auth]
**Endpoint:** `/company-auth` 

**Purpose:** Authenticate a company by getting a JWT from the server.

### Company Auth to Receive Token (POST) [POST]

+ Request
    + Attributes (CompanyAuth)

+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1odWV0ZXIiLCJpYXQiOjE1MTAyMDcwMDl9.5oUeihYn2AkqGy6z3g5F5B46gWWgvGKilFr9S4gg-p4` (string, required) - JWT used to authenticate in the future. Put in `Authorization` request header like: `Bearer <TOKEN>`.

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

## Users [/users{?offset,limit,search}]
**Endpoint:** `/users` 

**Purpose:** Create a user, query a list of users, or search for users

### Get a List of Users (GET) [GET]
**Auth Required**. Note: passwords are not visible at this endpoint. By default, `limit` is set to 50.

+ Parameters
    + offset: 0 (number, optional) - the list of results to skip over. Default is 0.
    + limit: 10 (number, optional) - the number of results to return. Default and maximum set to 50.
    + search: `Matt Lane` (string, optional) - a URI-encoded search query string.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[User])

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

### Create a New User (POST) [POST]
Note: password will not be present in the response.
The fields `username`, `password`, and `name` cannot be null.

+ Request
    + Attributes (NewUser)

+ Response 201 (application/json; charset=utf-8)
    + Attributes (User)

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 409 (application/json; charset=utf-8)
    + Attributes
        + error (Conflict)


## User [/users/{username}]
**Endpoint:** `/users/{username}`

**Purpose:** Reading, updating, or deleting a single user.

+ Parameters
    + username: hueter (string, required) - the username to lookup.

### Get a User (GET) [GET]
**Auth Required**. Retrieve a single user by their `username`.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (User)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

### Update a User (PATCH) [PATCH]
**Auth Required. Correct User Required.** Update a single user by its `username`.

+ Request
    + Attributes (User)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (User)

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

### Delete a User (DELETE) [DELETE]
**Auth Required. Correct User Required.** Remove a single user by their `username`.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (User)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

## Companies [/companies{?offset,limit,search}]
**Endpoint:** `/companies` 

**Purpose:** Create a company, query for a list of companies, or search for companies.

### Get a List of Companies (GET) [GET]
**Auth Required**. By default, `limit` is set to 50.

+ Parameters
    + offset: 0 (number, optional) - the list of results to skip over. Default is 0.
    + limit: 50 (number, optional) - the number of results to return. Default and maximum set to 50.
    + search:  `Github` (string, optional) - a URI-encoded search query string

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[Company])

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

### Create a New Company (POST) [POST]
The fields `name`, `password`, `email`, and `handle` are cannot be null.

+ Request
    + Attributes (NewCompany)

+ Response 201 (application/json; charset=utf-8)
    + Attributes (Company)

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 409 (application/json; charset=utf-8)
    + Attributes
        + error (Conflict)

## Company [/companies/{handle}]
**Endpoint:** `/company/{handle}` 

**Purpose:** Reading, updating, or deleting a single company.

+ Parameters
    + handle: `hooli` (string, required) - the company to lookup.

### Get a Company (GET) [GET]
**Auth Required**. Retrieve a single company by its `handle`.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Company)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)


### Update a Company (PATCH) [PATCH]
**Auth Required. Correct Company Required.** Update a single company by its `handle`

+ Request
    + Attributes (Company)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (Company)

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

### Delete a Company (DELETE) [DELETE]
**Auth Required. Correct Company Required.** Remove a single company by its `handle`.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Company)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

## Jobs [/jobs{?offset,limit,search}]
**Endpoint:** `/jobs` 

**Purpose:** Create a new job listing, query a list of job listings, or search for job listings.

### Get a List of Jobs (GET) [GET]
**Auth Required**. By default, `limit` is set to 50.

+ Parameters
    + offset: 0 (number, optional) - the list of documents to offset over. Default is 0.
    + limit: 50 (number, optional) - the number of documents to return. Default and maximum set to 50.
    + search:  `Github` (string, optional) - a URI-encoded search query string

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[Job])

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

### Create a New Job (POST) [POST]
**Auth Required (Companies Only)**. The fields `title`, `company`, and `salary` cannot be null.

+ Request
    + Attributes (Job)
+ Response 201 (application/json; charset=utf-8)
    + Attributes (Job)

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 409 (application/json; charset=utf-8)
    + Attributes
        + error (Conflict)

## Job [/jobs/{id}]

**Endpoint:** `/jobs/{id}`

**Purpose:** Reading, updating, or deleting a single job.

+ Parameters
    + id: 4 (string, required) - the job to lookup.

### Get a Job (GET) [GET]
**Auth Required**. Retrieve a single job by its `id`.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Job)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)


### Update a Job (PATCH) [PATCH]
**Auth Required. Correct Company Required.** Update a single job by `id`.

+ Request
    + Attributes (Job)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Job)

+ Response 400 (application/json; charset=utf-8)
    + Attributes
        + error (Bad Request)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

### Delete a Job (DELETE) [DELETE]
**Auth Required. Correct Company Required.** Remove a single job by its `id`.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Job)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

## Job Applications [/jobs/{id}/apply]
**Endpoint:** `/jobs/{id}/apply` 

**Purpose:** Apply for a job or delete a job application.

### Apply for a Job (POST) [POST]
**Auth Required (Users Only)**. Apply to a job by its `id`, the username is collected from the token. No POST body required.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Job Apply Success)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

### Delete a Job Application (DELETE) [DELETE]
**Auth Required. Correct User/Company Required.**. A user may withdraw their application, or a company may delete it.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Job Delete Success)

+ Response 401 (application/json; charset=utf-8)
    + Attributes
        + error (Unauthorized)

+ Response 404 (application/json; charset=utf-8)
    + Attributes
        + error (Not Found)

## Data Structures

### UserAuth
  + username: `hueter` (string, optional) - username can only consist of letters and numbers between 1 and 55 characters.
  + password: `foo123` (string, optional) - between 1 and 55 characters.

### CompanyAuth
  + handle: `hooli` (string, optional) - email can only consist of letters and numbers between 1 and 55 characters.
  + password: `bloodboy` (string, optional) - between 1 and 55 characters.

### NewUser
  + current_company: rithm (string, optional) - This should reference a handle for a company IF IT EXISTS
  + email: `michael@rithmschool.com` (string, optional) - email can only consist of letters and numbers between 6 and 60 characters. **Required to Create a New User.**
  + first_name: `Michael` (string, optional) - the user's first name, between 1 and 55 characters. **Required to Create a New User.**
  + last_name: `Hueter` (string, optional) - the user's last name, between 1 and 55 characters. **Required to Create a New User.**
  + password: `foo123` (string, optional) - between 1 and 55 characters. **Required to Create a New User.**
  + photo: `https://www.michaelhueter.com` (string, optional) - A valid URL for a photo
  + username: `hueter` (string, optional) - username can only consist of letters and numbers between 1 and 55 characters. **Required to Create a New User. Immutable.**

### User
  + applied_to: 2, 3 (array[number], optional) - an array of job IDs the user has applied to
  + current_company: rithm (string, optional) - This should reference a handle for a company IF IT EXISTS
  + email: `michael@rithmschool.com` (string, optional) - email can only consist of letters and numbers between 6 and 55 characters. **Required to Create a New User.**
  + first_name: `Michael` (string, optional) - the user's first name, between 1 and 55 characters. **Required to Create a New User.**
  + last_name: `Hueter` (string, optional) - the user's last name, between 1 and 55 characters. **Required to Create a New User.**
  + password: `foo123` (string, optional) - between 1 and 55 characters. **Required to Create a New User.**
  + photo: `https://www.michaelhueter.com` (string, optional) - A valid URL for a photo
  + username: `hueter` (string, optional) - username can only consist of letters and numbers between 1 and 55 characters. **Required to Create a New User. Immutable.**


### NewCompany
  + email: `gavinhooli.com` (string, optional) - between 1 and 55 characters. **Required to Create a New Company.**
  + handle: `hooli` (string, optional) - between 1 and 55 characters. **Required to Create a New Company.**
  + logo: `https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png` (string, optional) - a valid URL for the logo of the company
  + name: `Hooli` (string, optional) - username can only consist of letters and numbers between 1 and 55 characters. **Required to Create a New Company. Immutable.**
  + password: `bloodboy` (string, optional) - between 1 and 55 characters. **Required to Create a New Company.**

### Company
  + email: `gavinhooli.com` (string, optional) - between 1 and 55 characters. **Required to Create a New Company.**
  + employees: hueter, mmmaaatttttt (array[string], optional) - array of usernames who work at the company
  + handle: hooli (string, optional) - between 1 and 55 characters. **Required to Create a New Company.**
  + jobs: 2, 3 (array[number]) - array of Job IDs
  + logo: `https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png` (string, optional) - a valid URL for the logo of the company
  + name: `Hooli` (string, optional) - username can only consist of letters and numbers between 1 and 55 characters. **Required to Create a New Company. Immutable.**
  + password: `bloodboy` (string, optional) - between 1 and 55 characters. **Required to Create a New Company.**

### Job
  + company: hooli (string, optional) - This should reference a company handle
  + equity: 2.1 (number, optional) - a float for the equity offered in this post
  + salary: `150000` (string, optional) - a string containing the salary offered in this post
  + title: `Software Developer` (string, optional) - the title for the job posting.

### Bad Request
  + status: 400 (number, required) - HTTP status code
  + title: Bad Request (string, required) - text accompanying the status code
  + message: `Invalid schema format or malformed JSON.` (string, required) - description of the error

### Unauthorized
  + status: 401 (number, required) - HTTP status code
  + title: Unauthorized (string, required) - text accompanying the status code
  + message: `You need to authenticate before accessing this resource.` (string, required) - description of the error

### Not Found
  + status: 404 (number, required) - HTTP status code
  + title: Not Found (string, required) - text accompanying the status code
  + message: `Record with that ID was not found.` (string, required) - description of the error

### Conflict
  + status: 409 (number, required) - HTTP status code
  + title: Conflict (string, required) - text accompanying the status code
  + message: `Another record with the same ID already exists.` (string, required) - description of the error

### Job Apply Success
  + message: `Successfully applied for job.` (string, required) - description of the event

### Job Delete Success
  + message: `Successfully deleted job application.` (string, required) - description of the event